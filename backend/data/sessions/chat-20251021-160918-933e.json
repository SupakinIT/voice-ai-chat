[
{
"role": "user",
"content": "ขอมุกๆฮาหน่อย"
},
{
"role": "assistant",
"content": "เบาๆ นะครับ 555+ 😄 แบบชิวๆ ไม่ต้องร้อนตัว ยิ้มไว้ สบายใจ อะไรจะง่ายขนาดนั้น ฮ่าๆๆ 😆 มุกนี้ฮาหรือเปล่า?"
},
{
"role": "user",
"content": "อันนี้ฮาแล้วหรอ"
},
{
"role": "assistant",
"content": "555+ มุกไม่ได้ฮาเลยใช่มั้ยครับ? ขอโทษที ที่ทำให้ผิดหวัง 😅 จะลองใหม่นะ... \n\nทำไมปลาไม่ชอบเข้าห้องน้ำ?  \nเพราะว่ามันกลัว **ชักโครก** ไง! 😂 \n\nอันนี้เป็นยังไงครับ? ฮาไปไหนที่ไหน? 🙃"
},
{
"role": "user",
"content": "นายสามารถทำอะไรได้บ้าง"
},
{
"role": "assistant",
"content": "ผมเป็น AI ช่วยเหลือ ที่สามารถช่วยคุณได้หลายอย่าง เช่น **ตอบคำถาม** ให้ข้อมูลที่เป็นประโยชน์, **แปลภาษา**, **เขียนบทความ**, หรือแม้แต่ **ให้คำแนะนำ** เรื่องต่างๆ 😊 \n\nอยากให้ช่วยเรื่องอะไรเป็นพิเศษมั้ยครับ?  \n- ถามเรื่องทั่วไป  \n- ช่วยค้นหาข้อมูล  \n- สร้าง content  \n- แปลภาษา  \n\nบอกมาได้เลยครับ ยินดีช่วยเต็มที่! 🙌"
},
{
"role": "user",
"content": "เป็น OpenAi Version อะไร ตัวไหน มาจากไหน"
},
{
"role": "assistant",
"content": "ตอนนี้ผมเป็น **ChatGPT** เวอร์ชัน **GPT-4** ซึ่งพัฒนาโดยบริษัท **OpenAI** ครับ 🚀\n\n**GPT-4** เป็นโมเดลภาษาขั้นสูง ที่ใช้เทคโนโลยี **AI (Artificial Intelligence)** เรียนรู้จากข้อมูลจำนวนมหาศาล เพื่อช่วยตอบคำถาม พูดคุย และทำงานต่างๆ ได้อย่างมีประสิทธิภาพ 🔥\n\nถ้าคุณมีคำถามเพิ่มเติมหรืออยากรู้จักผมมากขึ้น ยินดีตอบทุกอย่างครับ! 😊"
},
{
"role": "user",
"content": "สร้างรูปได้มั้ย"
},
{
"role": "assistant",
"content": "ตอนนี้ผมเป็น **ChatGPT** แบบข้อความ (Text-based) ครับ เลย **ยังไม่สามารถสร้างรูปภาพได้โดยตรง** 🙏 แต่ถ้าคุณต้องการสร้างรูปภาพหรือออกแบบภาพ 我可以แนะนำเครื่องมืออื่น เช่น:\n\n1. **DALL·E** (AI สร้างภาพจากคำอธิบาย)  \n2. **MidJourney** (AI สร้างภาพสไตล์ศิลปะ)  \n3. **Canva** (ออกแบบกราฟิกอย่างง่าย)  \n\nถ้าอยากได้ความรู้เพิ่มเติมหรือคำแนะนำเรื่องนี้ บอกได้เลยครับ 😊"
},
{
"role": "user",
"content": "วาดรูปด้วย Text หรือ Symbols ให้หน่อย"
},
{
"role": "assistant",
"content": "ได้เลยครับ! มาลองวาดรูปง่ายๆ ด้วยตัวอักษรหรือสัญลักษณ์กัน 😊  \n\nตัวอย่าง 1: **แมวน้อย**  \n```\n /\\_/\\  \n( o.o )  \n > ^ <\n```\n\nตัวอย่าง 2: **ดอกไม้**  \n```\n   🌸  \n  🌸🌸  \n 🌸🌸🌸  \n   🌸  \n   🌸  \n```\n\nตัวอย่าง 3: **หน้ายิ้ม**  \n```\n  😊  \n```\n\nถ้าอยากได้รูปอะไรเป็นพิเศษ บอกมาได้เลยนะครับ! 🙌"
},
{
"role": "user",
"content": "แบบชูนิ้วโป้งได้มั้ย"
},
{
"role": "assistant",
"content": "ได้เลยครับ! นี่คือรูปชูนิ้วโป้งแบบ Text หรือ Symbols ให้คุณ 😊👇\n\n```\n   👍  \n  /|\\  \n / | \\  \n   |  \n   |  \n```\n\nหรือแบบง่ายๆ ก็ 👉 **👍**  \n\nหรือถ้าอยากได้แบบอื่น บอกได้นะครับ 😄"
},
{
"role": "user",
"content": "<!doctype html>\r\n<html lang=\"th\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <title>AI Chat</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n    <style>\r\n        * {\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            margin: 0;\r\n            font-family: system-ui, -apple-system, Segoe UI, Roboto, 'Noto Sans Thai', sans-serif;\r\n            height: 100vh;\r\n            display: grid;\r\n            grid-template-columns: 280px 1fr;\r\n            grid-template-rows: 1fr auto;\r\n            grid-template-areas:\r\n                \"sidebar chat\"\r\n                \"sidebar input\";\r\n            background: #f0f2f5;\r\n        }\r\n\r\n        /* Sidebar */\r\n        #sidebar {\r\n            grid-area: sidebar;\r\n            background: #111214;\r\n            color: #e5e7eb;\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        #sidebar header {\r\n            padding: 16px;\r\n            border-bottom: 1px solid #26272b;\r\n        }\r\n\r\n        #new-chat {\r\n            width: 100%;\r\n            padding: 10px 14px;\r\n            border: 1px solid #2b2d31;\r\n            background: #1f2125;\r\n            color: #e5e7eb;\r\n            border-radius: 8px;\r\n            cursor: pointer;\r\n        }\r\n\r\n        #sessions {\r\n            flex: 1;\r\n            overflow-y: auto;\r\n            padding: 8px 8px 16px;\r\n        }\r\n\r\n        .session-item {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n            padding: 10px;\r\n            border-radius: 8px;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .session-item.active {\r\n            background: #2b2d31;\r\n        }\r\n\r\n        .session-title {\r\n            flex: 1;\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n        }\r\n\r\n        .del-btn {\r\n            background: transparent;\r\n            color: #a1a1aa;\r\n            border: none;\r\n            cursor: pointer;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .del-btn:hover {\r\n            color: #fda4af;\r\n        }\r\n\r\n        /* Chat area */\r\n        #chat-container {\r\n            grid-area: chat;\r\n            overflow-y: auto;\r\n            padding: 24px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 12px;\r\n        }\r\n\r\n        .message {\r\n            max-width: 80%;\r\n            padding: 12px 16px;\r\n            border-radius: 12px;\r\n            line-height: 1.6;\r\n            white-space: pre-wrap;\r\n        }\r\n\r\n        .user {\r\n            align-self: flex-end;\r\n            background: #0078ff;\r\n            color: #fff;\r\n        }\r\n\r\n        .assistant {\r\n            align-self: flex-start;\r\n            background: #fff;\r\n            border: 1px solid #e5e7eb;\r\n        }\r\n\r\n        /* Input bar */\r\n        #input-bar {\r\n            grid-area: input;\r\n            display: flex;\r\n            gap: 8px;\r\n            padding: 12px;\r\n            background: #fff;\r\n            border-top: 1px solid #e5e7eb;\r\n        }\r\n\r\n        #prompt {\r\n            flex: 1;\r\n            padding: 10px 14px;\r\n            border: 1px solid #d1d5db;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            outline: none;\r\n        }\r\n\r\n        #send {\r\n            padding: 10px 16px;\r\n            border: none;\r\n            border-radius: 8px;\r\n            background: #0078ff;\r\n            color: #fff;\r\n            cursor: pointer;\r\n        }\r\n\r\n        #send:hover {\r\n            background: #0064d3;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <!-- Sidebar -->\r\n    <aside id=\"sidebar\">\r\n        <header>\r\n            <button id=\"new-chat\">+ New chat</button>\r\n        </header>\r\n        <div id=\"sessions\"></div>\r\n    </aside>\r\n\r\n    <!-- Chat -->\r\n    <main id=\"chat-container\"></main>\r\n\r\n    <!-- Input -->\r\n    <footer id=\"input-bar\">\r\n        <textarea id=\"prompt\" rows=\"1\" placeholder=\"พิมพ์แล้วกด Enter เพื่อส่ง (Shift+Enter ขึ้นบรรทัดใหม่)\"></textarea>\r\n        <button id=\"send\">ส่ง</button>\r\n    </footer>\r\n\r\n    <script>\r\n        const API_BASE = \"http://localhost:8000\";\r\n        const chatBox = document.getElementById('chat-container');\r\n        const promptBox = document.getElementById('prompt');\r\n        const sendBtn = document.getElementById('send');\r\n        const sessionsEl = document.getElementById('sessions');\r\n        const newChatBtn = document.getElementById('new-chat');\r\n\r\n        let session_id = localStorage.getItem(\"session_id\") || null;\r\n\r\n        // ===== API helpers =====\r\n        async function apiListSessions() {\r\n            const r = await fetch(`${API_BASE}/api/sessions`);\r\n            return (await r.json()).sessions;\r\n        }\r\n        async function apiCreateSession(id = null) {\r\n            const res = await fetch(`${API_BASE}/api/sessions`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify(id ? { session_id: id } : {}),   // ส่ง JSON (หรือ body ว่าง)\r\n            });\r\n            if (!res.ok) throw new Error(\"create session failed\");\r\n            return await res.json();\r\n        }\r\n        async function apiDeleteSession(id) {\r\n            await fetch(`${API_BASE}/api/sessions/${encodeURIComponent(id)}`, { method: \"DELETE\" });\r\n        }\r\n        async function apiGetHistory(id) {\r\n            const r = await fetch(`${API_BASE}/api/history?session_id=${encodeURIComponent(id)}`);\r\n            return await r.json();\r\n        }\r\n        async function apiStream(prompt, id) {\r\n            const fd = new FormData();\r\n            fd.append(\"prompt\", prompt);\r\n            fd.append(\"session_id\", id);\r\n            const res = await fetch(`${API_BASE}/api/chat_stream`, { method: \"POST\", body: fd });\r\n            if (!res.ok || !res.body) throw new Error(\"stream failed\");\r\n            return res.body.getReader();\r\n        }\r\n\r\n        // ===== UI helpers =====\r\n        function renderSessions(list) {\r\n            sessionsEl.innerHTML = \"\";\r\n            list.forEach(item => {\r\n                const row = document.createElement('div');\r\n                row.className = 'session-item' + (item.session_id === session_id ? ' active' : '');\r\n                const title = document.createElement('div');\r\n                title.className = 'session-title';\r\n                title.textContent = item.title;\r\n\r\n                const del = document.createElement('button');\r\n                del.className = 'del-btn';\r\n                del.title = 'Delete';\r\n                del.textContent = '🗑';\r\n\r\n                row.appendChild(title);\r\n                row.appendChild(del);\r\n                sessionsEl.appendChild(row);\r\n\r\n                row.addEventListener('click', async (e) => {\r\n                    if (e.target === del) return; // กดลบ จะไม่โหลดห้อง\r\n                    session_id = item.session_id;\r\n                    localStorage.setItem(\"session_id\", session_id);\r\n                    document.querySelectorAll('.session-item').forEach(x => x.classList.remove('active'));\r\n                    row.classList.add('active');\r\n                    await loadHistoryToChat();\r\n                });\r\n\r\n                del.addEventListener('click', async (e) => {\r\n                    e.stopPropagation();\r\n                    if (!confirm('ลบห้องนี้?')) return;\r\n                    await apiDeleteSession(item.session_id);\r\n                    if (session_id === item.session_id) {\r\n                        session_id = null;\r\n                        localStorage.removeItem(\"session_id\");\r\n                        chatBox.innerHTML = \"\";\r\n                    }\r\n                    await refreshSessions();\r\n                });\r\n            });\r\n        }\r\n\r\n        function addMessage(role, text) {\r\n            const div = document.createElement('div');\r\n            div.className = `message ${role}`;\r\n            div.textContent = text;\r\n            chatBox.appendChild(div);\r\n            chatBox.scrollTop = chatBox.scrollHeight;\r\n            return div;\r\n        }\r\n\r\n        async function refreshSessions() {\r\n            const list = await apiListSessions();\r\n            if (!list.length) {\r\n                try {\r\n                    const created = await apiCreateSession();   // สร้างครั้งเดียว\r\n                    session_id = created.session_id;\r\n                    localStorage.setItem(\"session_id\", session_id);\r\n                    const list2 = await apiListSessions();\r\n                    renderSessions(list2);\r\n                    return;\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    // โชว์ข้อความบน sidebar หรือ alert ก็ได้\r\n                    sessionsEl.innerHTML = \"<div style='padding:10px;color:#fca5a5'>สร้างห้องไม่สำเร็จ</div>\";\r\n                    return; // หยุด ไม่วนซ้ำ\r\n                }\r\n            }\r\n            if (!session_id) {\r\n                session_id = list[0].session_id;\r\n                localStorage.setItem(\"session_id\", session_id);\r\n            }\r\n            renderSessions(list);\r\n        }\r\n\r\n        async function loadHistoryToChat() {\r\n            const data = await apiGetHistory(session_id);\r\n            chatBox.innerHTML = \"\";\r\n            for (const m of data.history) {\r\n                addMessage(m.role, m.content);\r\n            }\r\n            chatBox.scrollTop = chatBox.scrollHeight;\r\n        }\r\n\r\n        // ===== Send & Stream =====\r\n        async function sendPrompt() {\r\n            const text = promptBox.value.trim();\r\n            if (!text || !session_id) return;\r\n\r\n            addMessage('user', text);\r\n            promptBox.value = '';\r\n            const aiDiv = addMessage('assistant', '');\r\n\r\n            try {\r\n                const reader = await apiStream(text, session_id);\r\n                const decoder = new TextDecoder('utf-8');\r\n                let full = \"\";\r\n                while (true) {\r\n                    const { value, done } = await reader.read();\r\n                    if (done) break;\r\n                    const chunk = decoder.decode(value, { stream: true });\r\n                    if (chunk) {\r\n                        full += chunk;\r\n                        aiDiv.textContent += chunk;\r\n                        chatBox.scrollTop = chatBox.scrollHeight;\r\n                    }\r\n                }\r\n                window.__lastReply = full.trim();\r\n                // โหลดประวัติใหม่ให้รายการห้องอัปเดต timestamp/preview\r\n                await refreshSessions();\r\n            } catch (err) {\r\n                aiDiv.textContent = \"❌ เกิดข้อผิดพลาดในการเชื่อมต่อ\";\r\n            }\r\n        }\r\n\r\n        // ===== Event bindings =====\r\n        sendBtn.onclick = sendPrompt;\r\n        promptBox.addEventListener('keydown', e => {\r\n            if (e.key === 'Enter' && !e.shiftKey) {\r\n                e.preventDefault(); sendPrompt();\r\n            }\r\n        });\r\n        newChatBtn.addEventListener('click', async () => {\r\n            const created = await apiCreateSession();\r\n            session_id = created.session_id;\r\n            localStorage.setItem(\"session_id\", session_id);\r\n            await refreshSessions();\r\n            await loadHistoryToChat();\r\n        });\r\n\r\n        // ===== Init =====\r\n        (async function init() {\r\n            await refreshSessions();\r\n            if (session_id) { await loadHistoryToChat(); }\r\n        })();\r\n    </script>\r\n</body>\r\n\r\n</html>\r\n\r\nอธิบาย Code นี้ให้ฟังหน่อย"
},
{
"role": "assistant",
"content": "# อธิบายโค้ดเว็บแชท AI\n\nโค้ดนี้เป็นเว็บแอปพลิเคชันสำหรับแชทกับ AI ที่มีฟีเจอร์ครบวงจร มามาดูส่วนประกอบหลักกัน:\n\n## โครงสร้าง HTML\n```html\n<!doctype html>\n<html lang=\"th\">\n<!-- ส่วนหัวกำหนด Metadata และภาษาไทย -->\n<head>\n    <!-- กำหนดการแสดงผลบนมือถือและหน้าหน้าจอต่างๆ -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n</head>\n<body>\n    <!-- แบ่ง layout เป็น 3 ส่วนหลัก -->\n    <aside id=\"sidebar\">...</aside>  <!-- แถบข้างสำหรับรายการแชท -->\n    <main id=\"chat-container\">...</main>  <!-- พื้นที่แสดงข้อความแชท -->\n    <footer id=\"input-bar\">...</footer>  <!-- ช่องพิมพ์และปุ่มส่งข้อความ -->\n</body>\n</html>\n```\n\n## สไตล์ CSS\n- ใช้ Grid Layout จัดวางโครงสร้างหลัก\n- มีการออกแบบที่ตอบสนองต่ออุปกรณ์ต่างๆ (Responsive)\n- สีสันแบ่งเป็นธีมมืด (sidebar) และธีมสว่าง (แชท)\n\n## ฟังก์ชันการทำงานหลัก (JavaScript)\n\n### 1. การจัดการเซสชันแชท\n```javascript\n// สร้างเซสชันใหม่\nasync function apiCreateSession()\n\n// ลบเซสชัน\nasync function apiDeleteSession()\n\n// แสดงรายการเซสชันทั้งหมด\nasync function apiListSessions()\n```\n\n### 2. การแชทกับ AI\n```javascript\n// ส่งข้อความและรับการตอบกลับแบบสตรีม\nasync function apiStream(prompt, id)\n\n// โหลดประวัติการแชท\nasync function apiGetHistory(id)\n```\n\n### 3. การแสดงผล UI\n```javascript\n// แสดงรายการเซสชันในแถบข้าง\nfunction renderSessions(list)\n\n// เพิ่มข้อความในหน้าหน้าต่างแชท\nfunction addMessage(role, text)\n\n// โหลดประวัติการแชทไปแสดง\nasync function loadHistoryToChat()\n```\n\n## จุดเด่นของโค้ด\n1. **การทำงานแบบ Real-time** - รับการตอบกลับจาก AI แบบสตรีม (แสดงผลทันทีที่ได้ข้อมูลบางส่วน)\n2. **การจัดการหลายเซสชัน** - สามารถสร้าง/ลบ/สลับระหว่างห้องแชทได้\n3. **การเก็บข้อมูล Local** - ใช้ localStorage จดจำเซสชันล่าสุด\n4. **UI ที่ทันสมัย** - ออกแบบให้ใช้งานง่ายทั้งบนมือถือและคอมพิวเตอร์\n\n## วิธีใช้งาน\n1. พิมพ์ข้อความในช่องด้านล่างแล้วกด Enter หรือปุ่ม \"ส่ง\"\n2. ใช้ปุ่ม \"+ New chat\" สร้างห้องสนทนาใหม่\n3. คลิกที่ห้องในแถบข้างเพื่อสลับระหว่างห้อง\n4. กดไอคอนถังขยะเพื่อลบห้องที่ไม่ต้องการ\n\nโค้ดนี้สามารถเชื่อมต่อกับ backend API ที่ให้บริการ AI chatbot ได้ โดยเปลี่ยนค่า `API_BASE` ให้ชี้ไปยังเซิร์ฟเวอร์ที่ให้บริการจริง"
},
{
"role": "user",
"content": "2 บ๊อก 2 ตอบกลับเท่าไหร่"
},
{
"role": "assistant",
"content": "\"2 บ๊อก 2\" เป็นสำนวนไทยที่ใช้ถามราคาสินค้า หรือค่าบริการ ซึ่งก็คือ **\"เท่าไหร่\"** นั่นเองครับ 😄  \n\nแต่ถ้าต้องการให้คำนวณตัวเลข **2 + 2** ตอบเลยว่า **4** ครับ! 🧮  \n\nถ้าอยากรู้เรื่องอื่นหรือมีคำถามอะไรเพิ่มเติม แค่ปลายนิ้วเลยครับ 😊"
},
{
"role": "user",
"content": "สวัสดีชมจีที"
},
{
"role": "assistant",
"content": "สวัสดีครับ! 😊 ยินดีต้อนรับไปสู่โลกของ AI ที่พร้อมช่วยเหลือคุณทุกเรื่อง ถ้าคุณมีคำถามหรือต้องการความช่วยเหลือเรื่องอะไร แค่บอกมาได้เลยนะครับ ยินดีช่วยเต็มที่! 🙌  \n\nเช่น:\n- ถามความรู้ทั่วไป\n- ช่วยหาข้อมูล\n- แปลภาษา\n- พูดคุยแก้เหงา\n\nพร้อมแล้วครับ สั่งมาได้เลย! 🚀"
},
{
"role": "user",
"content": "วันนี้ตอนเย็นฝนจะตกไหม รถติดรึป่าว เช็คจากในตัวเมืองนครศรีธรรมราช"
},
{
"role": "assistant",
"content": "ตอนนี้ผมไม่สามารถตรวจสอบสภาพอากาศหรือสภาพการจราจรแบบ Real-time ได้โดยตรงนะครับ 🙏 แต่ผมจะให้คำแนะนำวิธีที่คุณเช็คได้เองง่ายๆ:\n\n### ตรวจสอบสภาพอากาศ\n1. **เว็บไซต์กรมอุตุนิยมวิทยาไทย**: [https://www.tmd.go.th](https://www.tmd.go.th)\n2. แอป **Weather** หรือ **Rain Alarm** บนสมาร์ทโฟน\n\n### ติดตามการจราจร\n1. **Google Maps**: ค้นหา \"นครศรีธรรมราช\" แล้วดูแผนที่\n2. แอป **Naviagtor Live** ของการทางพิเศษไทย\n\nและจากข้อมูลในวันที่รับทราบ นครศรีธรรมราชมักมีฝนตกในช่วงเย็น โดยเฉพาะในช่วงฤดูฝน ซึ่งอาจทำให้การจราจรหนาแน่นขึ้นได้ครับ 🚗\n\n### คำแนะนำเพิ่มเติม\n- เตรียมร่มหรือเสื้อกันฝนติดตัวไว้\n- ตรวจสอบการจราจรก่อนออกเดินทาง\n\nถ้ามีคำถามอะไรเพิ่มเติม เสมอนะครับ! 👍"
},
{
"role": "user",
"content": "สภาพอากาศวันนี้เป็นยังไงบ้าง"
},
{
"role": "assistant",
"content": "สำหรับสภาพอากาศในวันนี้ ผมต้องขออภัยด้วยครับ เพราะตอนนี้ผมไม่สามารถเข้าถึงข้อมูลแบบ Real-time ได้ 😅 แต่แนะนำวิธีตรวจสอบง่ายๆ ดังนี้:\n\n### วิธีเช็คสภาพอากาศ\n1. **เว็บไซต์กรมอุตุนิยมวิทยาไทย**: [https://www.tmd.go.th](https://www.tmd.go.th)\n2. แอป **Weather** บนสมาร์ทโฟน\n3. เช็คบน **Google** ค้นหา \"สภาพอากาศวันนี้\"\n\n### รายงานทั่วไป\nโดยทั่วไปประเทศไทยมักมีอากาศร้อนในตอนกลางวัน และอาจมีฝนตกในบางพื้นที่ โดยเฉพาะในช่วงบ่ายถึงเย็น 🌦️\n\nถ้าคุณต้องการข้อมูลเฉพาะที่หรือรายละเอียดเพิ่มเติม ลองใช้วิธีด้านบนนะครับ หรือมีคำถามอะไรอื่นตรงไหน บอกได้เลยครับ 😊"
}
]