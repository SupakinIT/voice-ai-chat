import os
import time
import json
import tempfile
import requests
import speech_recognition as sr
import pyttsx3
from dotenv import load_dotenv

# ========== CONFIG ==========
MODEL_ID = "deepseek/deepseek-chat"   # ‡πÇ‡∏°‡πÄ‡∏î‡∏• DeepSeek ‡∏ö‡∏ô OpenRouter
API_URL = "https://openrouter.ai/api/v1/chat/completions"
REQUEST_TIMEOUT = 30

LANG_STT = "th-TH"   # ‡∏ü‡∏±‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
LANG_TTS = "th"      # ‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö gTTS)
USE_GTTS_FALLBACK = True
# ===========================

load_dotenv()
API_KEY = os.getenv("OPENROUTER_API_KEY", "").strip()

r = sr.Recognizer()
engine = pyttsx3.init()

def select_thai_voice_if_available() -> bool:
    """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢‡∏ö‡∏ô Windows ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (SAPI5 via pyttsx3)"""
    try:
        for v in engine.getProperty('voices'):
            name = (getattr(v, 'name', '') or '').lower()
            id_ = (getattr(v, 'id', '') or '').lower()
            # ‡∏ö‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏ô‡πÄ‡∏°‡∏ï‡∏≤‡∏î‡∏≤‡∏ï‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠/‡πÑ‡∏≠‡∏î‡∏µ‡πÅ‡∏ó‡∏ô
            if 'thai' in name or 'th' in name or 'thai' in id_ or 'th' in id_:
                engine.setProperty('voice', v.id)
                rate = engine.getProperty('rate')
                engine.setProperty('rate', max(160, rate))  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏±‡∏î
                return True
    except Exception:
        pass
    return False

HAS_THAI_VOICE = select_thai_voice_if_available()

def ai_reply(prompt: str) -> str:
    """‡∏ñ‡∏≤‡∏° DeepSeek ‡∏ú‡πà‡∏≤‡∏ô OpenRouter ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢"""
    if not API_KEY:
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö OPENROUTER_API_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env ‡∏Ñ‡∏£‡∏±‡∏ö"

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
        # header ‡πÄ‡∏™‡∏£‡∏¥‡∏° (‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á rate-limit/‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏≠‡∏õ)
        "HTTP-Referer": "http://localhost",
        "X-Title": "Windows Voice Assistant (TH)"
    }
    payload = {
        "model": MODEL_ID,
        "messages": [
            {"role": "system", "content": "You are a helpful assistant. Always reply in Thai."},
            {"role": "user", "content": prompt}
        ]
    }
    try:
        resp = requests.post(API_URL, headers=headers, json=payload, timeout=REQUEST_TIMEOUT)
        if resp.status_code != 200:
            return f"‚ùå API Error (HTTP {resp.status_code}) : {resp.text[:200]}"
        data = resp.json()
        return data["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        return f"‚ùå ‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}"
    except Exception as e:
        return f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: {e}"

def speak(text: str):
    """‡∏û‡∏π‡∏î‡∏≠‡∏≠‡∏Å‡∏•‡∏≥‡πÇ‡∏û‡∏á: ‡πÉ‡∏ä‡πâ pyttsx3 ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢‡∏Ñ‡πà‡∏≠‡∏¢ gTTS"""
    if not text:
        return
    try:
        if HAS_THAI_VOICE:
            engine.say(text)
            engine.runAndWait()
        elif USE_GTTS_FALLBACK:
            from gtts import gTTS
            from playsound import playsound
            tts = gTTS(text=text, lang=LANG_TTS)
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as f:
                path = f.name
            tts.save(path)
            # playsound ‡∏ö‡∏ô Windows ‡πÄ‡∏•‡πà‡∏ô mp3 ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
            playsound(path)
            try:
                os.remove(path)
            except Exception:
                pass
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö ‡∏Å‡πá‡∏≠‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á default
            engine.say(text)
            engine.runAndWait()
    except Exception as e:
        print("TTS error:", e)

def list_mics():
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô (‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å device_index ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)"""
    try:
        import pyaudio
        p = pyaudio.PyAudio()
        print("\n=== Microphone devices ===")
        for i in range(p.get_device_count()):
            info = p.get_device_info_by_index(i)
            if int(info.get("maxInputChannels", 0)) > 0:
                print(f"[{i}] {info.get('name')}")
        p.terminate()
    except Exception as e:
        print("List mic error:", e)

def listen(device_index=None) -> str:
    """‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏•‡∏≠‡∏î)"""
    with sr.Microphone(device_index=device_index) as source:
        print("üéô ‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á)...")
        r.adjust_for_ambient_noise(source, duration=0.5)
        audio = r.listen(source)
    try:
        text = r.recognize_google(audio, language=LANG_STT)
        print("üó£ ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤:", text)
        return text
    except sr.UnknownValueError:
        print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏Ñ‡∏£‡∏±‡∏ö")
        return ""
    except sr.RequestError as e:
        print("‚ö†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:", e)
        return ""

if __name__ == "__main__":
    # (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö) ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡∏Ñ‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    # list_mics()
    # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏°‡∏Ñ‡πå‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà index ‡πÄ‡∏ä‡πà‡∏ô device_index=1
    DEVICE_INDEX = None

    print("=== DeepSeek Thai Voice Assistant (Windows) ===")
    print("‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏û‡∏¥‡∏°‡∏û‡πå Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á, ‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ '‡∏´‡∏¢‡∏∏‡∏î' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏≠‡∏≠‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°\n")

    try:
        while True:
            input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‚Ä¶ ")
            cmd = listen(device_index=DEVICE_INDEX)
            if not cmd:
                continue
            if cmd.strip().lower() in {"‡∏´‡∏¢‡∏∏‡∏î", "‡∏≠‡∏≠‡∏Å", "‡∏à‡∏ö", "‡∏û‡∏≠", "‡∏ö‡∏≤‡∏¢"}:
                print("üëã ‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
                speak("‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
                break

            reply = ai_reply(cmd)
            print("ü§ñ AI:", reply)
            speak(reply)
    except KeyboardInterrupt:
        print("\nüëã ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
